import subprocess
import json
import sys

def read_json(file):
    with open(file,'r') as f:
        return json.load(f)


def generate_mf_class(input_data):
    grouping_attributes = input_data["V"]
    aggregates = input_data["F"]
    group_fields = set(grouping_attributes)
    agg_fields = set()
    for agg in aggregates:
        if "avg" in agg.lower():
            sum_field = agg.replace("avg","sum")
            count_field = agg.replace("avg","count")
            agg_fields.add(sum_field)
            agg_fields.add(count_field)
        else:
            agg_fields.add(agg)
    
    group_assignments = "\n        ".join([f"self.{attr} = {attr}" for attr in group_fields])
    agg_assignments = "\n        ".join([f"self.{attr} = 0" for attr in agg_fields])
    return f"""
class MFStructure:
    def __init__(self, {', '.join(grouping_attributes)}):
        {group_assignments}
        {agg_assignments}
"""


def main():

    input_data = read_json("input.json")
    
    mf_class_code = generate_mf_class(input_data)
    grouping_keys  = input_data["V"]
    final_fields = list(dict.fromkeys(grouping_keys + input_data['S']))
    body = f"""
    h_table = []
    for row in cur:
        found = False
        for entry in h_table:
            if {" and ".join([f"entry.{key} == row['{key}']" for key in grouping_keys])}:
                found = True
                for att,val in vars(entry).items():
                    if att=='sum_quant':
                        entry.sum_quant += row['quant']
                    if att=='min_quant':
                        if entry.min_quant > row['quant']:
                            entry.min_quant = row['quant']
                    if att=='max_quant':
                        if entry.max_quant < row['quant']:
                            entry.max_quant = row['quant']
                    if att=='count_quant':
                        entry.count_quant += 1
                break
        if not found:
            new_entry = MFStructure({', '.join(["row['" + key + "']" for key in grouping_keys])})
            for att,val in vars(new_entry).items():
                    if att=='sum_quant':
                        new_entry.sum_quant = row['quant']
                    if att=='min_quant':
                        new_entry.min_quant = row['quant']
                    if att=='max_quant':
                        new_entry.max_quant = row['quant']
                    if att=='count_quant':
                        new_entry.count_quant = 1
            h_table.append(new_entry)
    for entry in h_table:
        _global.append({{
        {', '.join([
            f"'{field}': (entry.{field.replace('avg','sum')} / entry.{field.replace('avg','count')}) if entry.{field.replace('avg','count')} != 0 else 0"
            if 'avg' in field.lower() else f"'{field}': entry.{field}"
            for field in final_fields
        ])}
    }})       
    """


    tmp = f"""
import os
import psycopg2
import psycopg2.extras
import tabulate
from dotenv import load_dotenv



{mf_class_code}
# DO NOT EDIT THIS FILE, IT IS GENERATED BY generator.py

def query():
    load_dotenv()

    user = os.getenv('USER')
    password = os.getenv('PASSWORD')
    dbname = os.getenv('DBNAME')

    conn = psycopg2.connect("dbname="+dbname+" user="+user+" password="+password,
                            cursor_factory=psycopg2.extras.DictCursor)
    cur = conn.cursor()
    cur.execute("SELECT * FROM sales where year=2019")
    
    _global = []
    {body}
    
    return tabulate.tabulate(_global,
                        headers="keys", tablefmt="psql")

def main():
    print(query())
    
if "__main__" == __name__:
    main()
    """

    # Write the generated code to a file
    open("_generated.py", "w").write(tmp)
    # Execute the generated code
    subprocess.run([sys.executable, "_generated.py"])


if "__main__" == __name__:
    main()


# fields = [f"self.{attr} = None" for attr in grouping_attributes]
# for agg in aggregates:
#     fields.append(f"self.{agg} = 0")
#     if "avg" in agg.lower():
#         count_field = agg.replace("avg","count")
#         fields.append(f"self.{count_field} = 0")
# fields_code = "\n        ".join(fields)