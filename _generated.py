
import os
import psycopg2
import psycopg2.extras
import tabulate
from dotenv import load_dotenv




class MFStructure:
    def __init__(self, cust, prod):
        self.cust = cust
        self.prod = prod
        self.count_quant = 0
        self.sum_quant = 0
        self.count_1_quant = 0
        self.sum_1_quant = 0
        self.count_2_quant = 0
        self.sum_2_quant = 0
        self.count_3_quant = 0
        self.sum_3_quant = 0

# DO NOT EDIT THIS FILE, IT IS GENERATED BY generator.py

def query():
    load_dotenv()

    user = os.getenv('USER')
    password = os.getenv('PASSWORD')
    dbname = os.getenv('DBNAME')

    conn = psycopg2.connect("dbname="+dbname+" user="+user+" password="+password,
                            cursor_factory=psycopg2.extras.DictCursor)
    cur = conn.cursor()
    cur.execute("SELECT * FROM sales")
    
    _global = []
    
    h_table = []
    for row in cur:
        found = False
        for entry in h_table:
            if entry.cust == row['cust'] and entry.prod == row['prod']:
                found = True
                for att,val in vars(entry).items():
                    if att=='sum_quant':
                        entry.sum_quant += row['quant']
                    if att=='min_quant':
                        if entry.min_quant > row['quant']:
                            entry.min_quant = row['quant']
                    if att=='max_quant':
                        if entry.max_quant < row['quant']:
                            entry.max_quant = row['quant']
                    if att=='count_quant':
                        entry.count_quant += 1
                break
        if not found:
            new_entry = MFStructure(row['cust'], row['prod'])
            for att,val in vars(new_entry).items():
                    if att=='sum_quant':
                        new_entry.sum_quant = row['quant']
                    if att=='min_quant':
                        new_entry.min_quant = row['quant']
                    if att=='max_quant':
                        new_entry.max_quant = row['quant']
                    if att=='count_quant':
                        new_entry.count_quant = 1
            h_table.append(new_entry)
    
    
    # Scan for grouping variable 1
    cur.execute("SELECT * FROM sales")
    for row in cur:
        if row['state'] == 'NY':
            for entry in h_table:
                if entry.cust == row['cust'] and entry.prod == row['prod']:
                    entry.sum_1_quant += row['quant']; entry.count_1_quant += 1
                    break

    # Scan for grouping variable 2
    cur.execute("SELECT * FROM sales")
    for row in cur:
        if row['state'] == 'NJ':
            for entry in h_table:
                if entry.cust == row['cust'] and entry.prod == row['prod']:
                    entry.count_2_quant += 1; entry.sum_2_quant += row['quant']
                    break

    # Scan for grouping variable 3
    cur.execute("SELECT * FROM sales")
    for row in cur:
        if row['state'] == 'CT':
            for entry in h_table:
                if entry.cust == row['cust'] and entry.prod == row['prod']:
                    entry.sum_3_quant += row['quant']; entry.count_3_quant += 1
                    break

        
    for entry in h_table:
        if entry.sum_1_quant > 2 * entry.sum_2_quant or (entry.sum_1_quant / entry.count_1_quant if entry.count_1_quant != 0 else 0) > (entry.sum_3_quant / entry.count_3_quant if entry.count_3_quant != 0 else 0):
            _global.append({
            'cust': entry.cust, 'prod': entry.prod, 'avg_quant': (entry.sum_quant / entry.count_quant) if entry.count_quant != 0 else 0, 'sum_quant': entry.sum_quant, 'sum_1_quant': entry.sum_1_quant, 'count_1_quant': entry.count_1_quant, 'avg_1_quant': (entry.sum_1_quant / entry.count_1_quant) if entry.count_1_quant != 0 else 0, 'avg_2_quant': (entry.sum_2_quant / entry.count_2_quant) if entry.count_2_quant != 0 else 0, 'avg_3_quant': (entry.sum_3_quant / entry.count_3_quant) if entry.count_3_quant != 0 else 0
    })       
    
    
    return tabulate.tabulate(_global,
                        headers="keys", tablefmt="psql")

def main():
    print(query())
    
if "__main__" == __name__:
    main()
    